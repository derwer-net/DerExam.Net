// <auto-generated />
using System;
using DerExam.Net.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DerExam.Net.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20190220074427_addentity")]
    partial class addentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DerExam.Net.Models.Classes", b =>
                {
                    b.Property<int>("ClassesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseID");

                    b.Property<int>("CoursesId");

                    b.Property<int?>("ExamId");

                    b.HasKey("ClassesId");

                    b.HasIndex("CourseID");

                    b.HasIndex("ExamId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DerExam.Net.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseNaem");

                    b.Property<string>("CourseTeacherName");

                    b.Property<string>("UserExtId");

                    b.HasKey("CourseID");

                    b.HasIndex("UserExtId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("DerExam.Net.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExamName");

                    b.Property<string>("UserExtId");

                    b.HasKey("ExamId");

                    b.HasIndex("UserExtId");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("DerExam.Net.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamId");

                    b.Property<double>("GradeResult");

                    b.Property<int>("UserID");

                    b.HasKey("GradeId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("DerExam.Net.Models.QuestionAndAnswer", b =>
                {
                    b.Property<int>("QuestionAndAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerContent");

                    b.Property<string>("QusetionContent");

                    b.HasKey("QuestionAndAnswerId");

                    b.ToTable("QuestionAndAnswer");
                });

            modelBuilder.Entity("DerExam.Net.Models.UserExt", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("ClassesId");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserClass");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ClassesId");

                    b.ToTable("UserExt");
                });

            modelBuilder.Entity("DerExam.Net.Models.Classes", b =>
                {
                    b.HasOne("DerExam.Net.Models.Course")
                        .WithMany("CourseClasses")
                        .HasForeignKey("CourseID");

                    b.HasOne("DerExam.Net.Models.Exam")
                        .WithMany("Classes")
                        .HasForeignKey("ExamId");
                });

            modelBuilder.Entity("DerExam.Net.Models.Course", b =>
                {
                    b.HasOne("DerExam.Net.Models.UserExt")
                        .WithMany("UserCourse")
                        .HasForeignKey("UserExtId");
                });

            modelBuilder.Entity("DerExam.Net.Models.Exam", b =>
                {
                    b.HasOne("DerExam.Net.Models.UserExt")
                        .WithMany("UserExams")
                        .HasForeignKey("UserExtId");
                });

            modelBuilder.Entity("DerExam.Net.Models.UserExt", b =>
                {
                    b.HasOne("DerExam.Net.Models.Classes")
                        .WithMany("MyProperty")
                        .HasForeignKey("ClassesId");
                });
#pragma warning restore 612, 618
        }
    }
}
